/* Babylon JS is available as **npm** package.  
You can easily build a simple `React` Component around a `canvas` and Babylon JS
I have created a minimal example with React+ Babylon:
 */
import React, { Component } from "react";
import * as BABYLON from "babylonjs";

var scene;
var boxMesh;
var SPS;
// SPS behavior definition
var speed = 2.5;
var gravity = -0.01;
/**
 * Example temnplate of using Babylon JS with React
 */
class Dust extends Component {
  constructor(props) {
    super(props);
    this.state = { useWireFrame: false, shouldAnimate: false };
  }

  componentDidMount = () => {
    // start ENGINE
    this.engine = new BABYLON.Engine(this.canvas, true);

    //Create Scene
    scene = new BABYLON.Scene(this.engine);

    //--Light---
    //this.addLight();

    //--Camera---
    //this.addCamera();

    //--Meshes---
    //this.addModels();

//this.addParticleEmitter();

    //--Ground---
    //this.addGround();

this.createScene();

    // Add Events
    window.addEventListener("resize", this.onWindowResize, false);

//Animation
scene.registerBeforeRender(() => {
  //boxMesh.rotation.y += 0.01;
  //boxMesh.rotation.x += 0.01;
  SPS.recycleParticle = function(particle) {
    // Set particle new velocity, scale and rotation
  // As this function is called for each particle, we don't allocate new
  // memory by using "new BABYLON.Vector3()" but we set directly the
  // x, y, z particle properties instead
    particle.position.x = 0;
    particle.position.y = 0;
    particle.position.z = 0;
    particle.velocity.x = (Math.random() - 0.5) * speed;
    particle.velocity.y = Math.random() * speed;
    particle.velocity.z = (Math.random() - 0.5) * speed;
    var scale = Math.random() + 0.5;
    particle.scale.x = scale;
    particle.scale.y = scale;
    particle.scale.z = scale;
    particle.rotation.x = Math.random() * 3.5;
    particle.rotation.y = Math.random() * 3.5;
    particle.rotation.z = Math.random() * 3.5;
    particle.color.r = Math.random() * 0.6 + 0.5;
    particle.color.g = Math.random() * 0.6 + 0.5;
    particle.color.b = Math.random() * 0.6 + 0.5;
    particle.color.a = Math.random() * 0.6 + 0.5;
  };

  // update : will be called by setParticles()
  SPS.updateParticle = function(particle) {  
    // some physics here 
    if (particle.position.y < 0) {
      this.recycleParticle(particle);
    }
    particle.velocity.y += gravity;                         // apply gravity to y
    (particle.position).addInPlace(particle.velocity);      // update particle new position
    particle.position.y += speed / 2;
  };

    // Render Loop
    this.engine.runRenderLoop(() => {
      scene.render();
    });

    
   
    });
  };

  componentWillUnmount() {
    window.removeEventListener("resize", this.onWindowResize, false);
  }

  onWindowResize = event => {
    this.engine.resize();
  };

  createScene = () => {
    //var scene = new BABYLON.Scene(engine);
    scene.clearColor = new BABYLON.Color3( .1, .2, .4);
    var camera = new BABYLON.ArcRotateCamera("camera1",  0, 0, 0, new BABYLON.Vector3(0, 0, -0), scene);
    camera.setPosition(new BABYLON.Vector3(0, 50, -300));
    camera.attachControl(this.canvas, true);
    var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(1, 1, 0), scene);
    light.intensity = 0.9;
    var pl = new BABYLON.PointLight("pl", new BABYLON.Vector3(0, 0, 0), scene);
    pl.diffuse = new BABYLON.Color3(1, 1, 1);
    pl.specular = new BABYLON.Color3(0.5, 0.2, 0.2);
    pl.intensity = 0.75;
  
    // texture and material
    var url = "http://upload.wikimedia.org/wikipedia/en/8/86/Einstein_tongue.jpg";
    var mat = new BABYLON.StandardMaterial("mat1", scene);
    mat.backFaceCulling = false;
    var texture = new BABYLON.Texture(url, scene);
    mat.diffuseTexture = texture;
  
    // SPS creation
    var plane = BABYLON.Mesh.CreatePlane("plane", 5, scene);
    SPS = new BABYLON.SolidParticleSystem('SPS', scene);
    SPS.addShape(plane, 1000);
    var mesh = SPS.buildMesh();
    mesh.material = mat;
    mesh.position.y = -50;
    plane.dispose();  // free memory
     
  
    // // SPS behavior definition
    // var speed = 1.5;
    // var gravity = -0.01;
  
    // init
    SPS.initParticles = function() {
      // just recycle everything
       for (var p = 0; p < this.nbParticles; p++) {
          this.recycleParticle(this.particles[p]);
      }
    };
  
    // recycle
    // SPS.recycleParticle = function(particle) {
    //   // Set particle new velocity, scale and rotation
    // // As this function is called for each particle, we don't allocate new
    // // memory by using "new BABYLON.Vector3()" but we set directly the
    // // x, y, z particle properties instead
    //   particle.position.x = 0;
    //   particle.position.y = 0;
    //   particle.position.z = 0;
    //   particle.velocity.x = (Math.random() - 0.5) * speed;
    //   particle.velocity.y = Math.random() * speed;
    //   particle.velocity.z = (Math.random() - 0.5) * speed;
    //   var scale = Math.random() + 0.5;
    //   particle.scale.x = scale;
    //   particle.scale.y = scale;
    //   particle.scale.z = scale;
    //   particle.rotation.x = Math.random() * 3.5;
    //   particle.rotation.y = Math.random() * 3.5;
    //   particle.rotation.z = Math.random() * 3.5;
    //   particle.color.r = Math.random() * 0.6 + 0.5;
    //   particle.color.g = Math.random() * 0.6 + 0.5;
    //   particle.color.b = Math.random() * 0.6 + 0.5;
    //   particle.color.a = Math.random() * 0.6 + 0.5;
    // };
  
    // // update : will be called by setParticles()
    // SPS.updateParticle = function(particle) {  
    //   // some physics here 
    //   if (particle.position.y < 0) {
    //     this.recycleParticle(particle);
    //   }
    //   particle.velocity.y += gravity;                         // apply gravity to y
    //   (particle.position).addInPlace(particle.velocity);      // update particle new position
    //   particle.position.y += speed / 2;
    // };
  
  
    // init all particle values and set them once to apply textures, colors, etc
    SPS.initParticles();
    SPS.setParticles();
     
    // Tuning : plane particles facing, so billboard and no rotation computation
    // colors not changing then, neither textures
    SPS.billboard = true;
    SPS.computeParticleRotation = false;
    SPS.computeParticleColor = false;
    SPS.computeParticleTexture = false;
  }

  /**
   * Add Lights
   */
  addLight = () => {
    //---------- LIGHT---------------------
    // Create a basic light, aiming 0,1,0 - meaning, to the sky.
    var light = new BABYLON.HemisphericLight(
      "light1",
      new BABYLON.Vector3(0, 10, 0),
      scene
    );
  };

  /**
   * Add Camera
   */
  addCamera = () => {
    // ---------------ArcRotateCamera or Orbit Control----------
    var camera = new BABYLON.ArcRotateCamera(
      "Camera",
      Math.PI / 2,
      Math.PI / 4,
      4,
      BABYLON.Vector3.Zero(),
      scene
    );
    camera.inertia = 0;
    camera.angularSensibilityX = 250;
    camera.angularSensibilityY = 250;

    // This attaches the camera to the canvas
    camera.attachControl(this.canvas, true);
    camera.setPosition(new BABYLON.Vector3(5, 5, 5));
  };

  /**
   * Create Stage and Skybox
   */
  addGround = () => {
    // Create a built-in "ground" shape.
    var ground = BABYLON.MeshBuilder.CreateGround(
      "ground1",
      { height: 6, width: 6, subdivisions: 2 },
      scene
    );
    var groundMaterial = new BABYLON.StandardMaterial("grass0", scene);
    groundMaterial.diffuseTexture = new BABYLON.Texture(
      "./assets/ground.jpeg",
      scene
    );
    ground.material = groundMaterial;

    //Add SkyBox
    var photoSphere = BABYLON.Mesh.CreateSphere("skyBox", 16.0, 50.0, scene);
    var skyboxMaterial = new BABYLON.StandardMaterial("smat", scene);
    skyboxMaterial.emissiveTexture = new BABYLON.Texture(
      "assets/skybox.jpeg",
      scene,
      1,
      0
    );
    skyboxMaterial.diffuseColor = new BABYLON.Color3(0, 0, 0);
    skyboxMaterial.specularColor = new BABYLON.Color3(0, 0, 0);
    skyboxMaterial.emissiveTexture.uOffset = -Math.PI / 2; // left-right
    skyboxMaterial.emissiveTexture.uOffset = 0.1; // up-down
    skyboxMaterial.backFaceCulling = false;
    photoSphere.material = skyboxMaterial;
  };

  addParticleEmitter = () => {
    // Emitters
    //const camera = new BABYLON.ArcRotateCamera("ArcRotateCamera", -Math.PI / 2, Math.PI / 2.2, 20, new BABYLON.Vector3(0, 0, 0), scene);
    //camera.attachControl(canvas, true);

//    const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

    // Ground for positional reference
    // const ground = BABYLON.MeshBuilder.CreateGround("ground", {width: 25, height: 25});
    // ground.material = new BABYLON.GridMaterial("groundMat");
    // ground.material.backFaceCulling = false;

    // Create a particle system
    const particleSystem = new BABYLON.ParticleSystem("particles", 2000);

    //Texture of each particle
    particleSystem.particleTexture = new BABYLON.Texture("textures/flare.png");

    // Position where the particles are emitted from
    particleSystem.emitter = new BABYLON.Vector3(0, 0.5, 0);
    particleSystem.start();

    particleSystem.minSize = 0.25;
    particleSystem.maxSize = 0.25

    particleSystem.emitRate = 5;

  }

  /**
   * Add Models
   */
  addModels = () => {
    // Add BOX
    boxMesh = BABYLON.MeshBuilder.CreateBox(
      "box",
      { height: 1, width: 1, depth: 1 },
      scene
    );
    boxMesh.position.y = 1;

    var woodMaterial = new BABYLON.StandardMaterial("wood", scene);
  
    woodMaterial.diffuseTexture = new BABYLON.BaseTexture(scene);
    woodMaterial.diffuseColor = BABYLON.Color3(0.5,0.8,0);
    // woodMaterial.diffuseTexture = new BABYLON.Texture(
    //   "./assets/portal_cube.png",
    //   scene
    // );
    boxMesh.material = woodMaterial;
  };

  render() {
    return (
      <canvas
        style={{ width: window.innerWidth, height: window.innerHeight }}
        ref={canvas => {
          this.canvas = canvas;
        }}
      />
    );
  }
}
export default Dust;